package movies

import (
	"fmt"
	"watchma/pkg/services"
	"watchma/pkg/types"
	"watchma/view/common"
	"slices"
)

func getWinnerMovies(moviesSortedByVote []types.MovieVote) []types.MovieVote {
	if len(moviesSortedByVote) == 0 {
		return []types.MovieVote{}
	}

	maxVotes := moviesSortedByVote[0].Votes
	var winners []types.MovieVote

	for _, movie := range moviesSortedByVote {
		if movie.Votes == maxVotes {
			winners = append(winners, movie)
		}
	}

	return winners
}

templ Movies(movies []types.JellyfinItem, baseURL string, room *services.Room) {
	<section id="moviesRoom" data-signals-movies>
		<div class="flex flex-col justify-center items-center">
			<span class="text-3xl">Movies</span>
			<div class="text-text flex flex-col items-center justify-center">
				<button
					id="moviesSubmit"
					class="btn"
					data-on-click={ fmt.Sprintf("@post('/room/%s')", room.Name) }
				>
					Submit Choices
				</button>
				@common.Error()
				<div data-signals-movies="[]">
					<div id="movieContainer" class="flex justify-center flex-wrap gap-2 md:gap-4 mt-6">
						for _, m := range movies {
							<label id="movieSwap" class="block w-40 h-60 md:w-64 md:h-96 border-2 cursor-pointer ring-0 has-[input:checked]:border-orange-500 has-[input:checked]:ring-orange-500 has-[input:checked]:ring-2">
								<input
									class="hidden"
									type="checkbox"
									value={ m.Id }
									data-bind-movies
								/>
								@common.MovieTitleImage(m, baseURL, common.MovieTitleImageOptions{})
							</label>
						}
					</div>
				</div>
			</div>
		</div>
	</section>
}

templ SubmitButton(movies []types.JellyfinItem, baseURL string, selectedMovies []string) {
	// This updates both the id="moviesSubmit" and the id="movieContainer" simultaneously when sent though SSE with PatchElementTempl!
	<button type="button" id="moviesSubmit" class="btn-success cursor-not-allowed">Movies Submitted!</button>
	<div id="movieContainer" class="mt-6">
		<div class="text-primary text-xl text-center mb-4">Waiting on remaining players...</div>
		<div class="flex justify-center flex-wrap gap-2 md:gap-4">
			for _, m := range movies {
				<div class="relative w-40 h-60 md:w-64 md:h-96">
					if slices.Contains(selectedMovies, m.Id) {
						@common.MovieTitleImage(m, baseURL, common.MovieTitleImageOptions{Class: "cursor-not-allowed border-2 border-green-500 ring-green-500 ring-2"})
					} else {
						@common.MovieTitleImage(m, baseURL, common.MovieTitleImageOptions{Class: "cursor-not-allowed border-2"})
					}
				</div>
			}
		</div>
	</div>
}

templ GameFinished(moviesSortedByVote []types.MovieVote, baseURL string) {
	{{ winnerMovies := getWinnerMovies(moviesSortedByVote) }}
	<section id="moviesRoom" class="h-full" data-signals-movies>
		<div class="flex flex-col justify-center h-full items-center">
			if len(winnerMovies) > 1 {
				<span class="text-4xl md:text-6xl text-shadow-hard">And the Winners are:</span>
			} else {
				<span class="text-4xl md:text-6xl text-shadow-hard">And the Winner is:</span>
			}
			<div class="text-text flex flex-col items-center justify-center">
				<div id="movieContainer" class="flex justify-center flex-wrap gap-2 md:gap-4 mt-6">
					for _, movieVote := range winnerMovies {
						<div class="block glow-border w-72 md:w-96">
							@common.MovieTitleImage(*movieVote.Movie, baseURL, common.MovieTitleImageOptions{Class: "cursor-not-allowed border-2 border-green-500 ring-green-500 ring-2"})
						</div>
					}
				</div>
				if moviesSortedByVote[0].Votes > 1 {
					<div class="mt-6 text-3xl md:text-5xl text-primary text-shadow-hard">With { moviesSortedByVote[0].Votes } Votes!</div>
				} else {
					<div class="mt-6 text-3xl md:text-5xl text-primary text-shadow-hard">With { moviesSortedByVote[0].Votes } Vote!</div>
				}
			</div>
		</div>
	</section>
}
