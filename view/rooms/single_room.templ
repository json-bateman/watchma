package rooms 

import (
	"encoding/json"
	"fmt"
	"watchma/pkg/services"
	"watchma/pkg/types"
	"watchma/view/common"
	"strings"
)

type ChatMessage struct {
	Username string `json:"username"`
	Message  string `json:"message"`
}

templ SingleRoom(pc common.PageContext, room *services.Room, username string) {
	@common.Layout(pc) {
		<section id="moviesRoom" class="flex justify-center grow">
			<!-- janky(?) way to set the subject field for the message payload
    TODO: make this not janky -->
			<span class="hidden" data-signals={ fmt.Sprintf("{subject: 'chat.%s',room: '%s'}", room.Name, room.Name) }></span>
			<div class="flex max-w-[800px] flex-col justify-between grow">
				<div>
					<div class="bg-background border-4 border-primary p-6 shadow-brutalist mb-6">
						<div class="text-text flex flex-wrap justify-between items-center  uppercase mb-4 border-b-4 border-white pb-2">
							<span class="text-4xl tracking-widest">{ room.Name }</span>
						</div>
						<div class="grid grid-cols-2 gap-4">
							<div class="bg-white text-black p-3 border-2 border-black">
								<div class="text-xs  uppercase tracking-wide">MOVIES</div>
								<div class="text-3xl ">{ room.Game.MovieNumber }</div>
							</div>
							<div class="bg-white text-black p-3 border-2 border-black">
								<div class="text-xs  uppercase tracking-wide">MAX PLAYERS</div>
								<div class="text-3xl ">{ room.Game.MaxPlayers }</div>
							</div>
						</div>
					</div>
					@UserBox(room, username)
				</div>
				<!-- Chatbox -->
				<div>
					<div class="flex gap-2">
						<input
							class="input mb-2"
							placeholder="chat message..."
							data-bind-message
							data-on-keydown="if (evt.key !== 'Enter' || !$message.trim().length) return; @post('/message');$message = '';"
						/>
						<button
							data-on-click={ "@post('/message');$message='';" }
							class="btn !w-16"
						>
							Send
						</button>
					</div>
					<div
						id="container"
						class="shadow-brutalist border-primary border-4"
						data-on-load={ fmt.Sprintf("@get('/sse/%s')", room.Name) }
					>
						<div id="chat" class="h-96 tracking-wide overflow-y-auto p-4 bg-primary/5"></div>
					</div>
				</div>
			</div>
		</section>
	}
}

templ ChatBox(messages []types.Message) {
	<div id="chat" class="h-96 tracking-wide overflow-y-auto p-4 bg-primary/5">
		for _, m := range messages {
			<div class="mb-2 flex">
				<span style={ getUserColor(m.Username, "color") } class="font-bold text-accent">{ strings.Trim(m.Username," ") }</span>
				<span class="text-gray-600">:&nbsp;</span>
				<span>{ m.Message }</span>
			</div>
		}
	</div>
}

templ UserBox(room *services.Room, username string) {
	{{
	totalReady := 0
	users := room.UsersByJoinTime()
	}}
	for _, u := range users {
		if u.Ready {
			{{ totalReady++ }}
		}
	}
	<div id="users" class="flex flex-col">
		if username == room.Game.Host {
			<span class="text-primary flex text-xl">You are the host!</span>
		}
		<div class="flex h-28 justify-between bg-background border-4 border-primary p-4 shadow-brutalist">
			<div class="w-20 text-text text-xl flex flex-col justify-center items-center">
				<span>READY</span>
				<div class="pl-2 pt-2 bg-secondary shadow-hard flex justify-center items-center px-2 py-1 text-center">
					<span>{ totalReady }/{ len(users) }</span>
				</div>
			</div>
			<div>
				<button
					class="btn uppercase gap-2 tracking-wide"
					data-on-click={ fmt.Sprintf("@post('/room/%s/ready')", room.Name) }
				>
					Ready Up!
				</button>
				if username == room.Game.Host {
					if len(users) == totalReady && totalReady > 1 {
						<button
							class="btn-success  uppercase tracking-wide"
							data-on-click={ fmt.Sprintf("@post('/room/%s/start')", room.Name) }
						>
							Start Game!
						</button>
					} else {
						<button
							class="btn-disabled  uppercase tracking-wide"
						>
							Start Game!
						</button>
					}
				}
			</div>
		</div>
		<div class="flex flex-wrap gap-4 my-4">
			for _, u := range users {
				if u.Ready {
					<div
						class="text-white text-xl shadow-hard-success border-4 border-green-600 justify-center items-center max-w-48 overflow-ellipsis p-4 flex"
						style={ getUserColor(u.Name, "background-color") }
					>
						<span>{ u.Name }</span>
					</div>
				} else {
					<div
						class="text-white text-xl shadow-hard-text border-4 border-text justify-center items-center max-w-48 overflow-ellipsis p-4 flex"
						style={ getUserColor(u.Name, "background-color") }
					>
						<span>{ u.Name }</span>
					</div>
				}
			}
		</div>
	</div>
}

templ Button(room *services.Room) {
	<div id="users" class="flex flex-col">
		<div class="flex justify-between bg-background border-4 border-primary p-4 shadow-brutalist mb-4">
			<div class="text-text text-xl  uppercase tracking-wider">
				<span>Players:&nbsp</span>
				<span class="text-2xl">{ len(room.Users) }</span>
			</div>
			<button
				class="btn"
				data-on-click={ fmt.Sprintf("@post('/room/%s/ready')", room.Name) }
			>
				Ready Up!
			</button>
		</div>
		<div class="flex flex-wrap gap-4">
			for _, u := range room.Users {
				<div
					class="text-white text-xl shadow-hard-text border-4 border-text justify-center items-center max-w-48 overflow-ellipsis p-4 flex"
					style={ getUserColor(u.Name, "background-color") }
				>
					<span>{ u.Name }</span>
				</div>
			}
		</div>
	</div>
}

func parseMessage(jsonStr string) *ChatMessage {
	var msg ChatMessage
	if err := json.Unmarshal([]byte(jsonStr), &msg); err != nil {
		return nil
	}
	return &msg
}

// getUserColor returns a deterministic color assignment based on username, claude made it don't judge me.
func getUserColor(username string, css string) templ.SafeCSS {
	colors := []string{
		"#ef4444;", // red
		"#f97316;", // orange
		"#eab308;", // yellow
		"#22c55e;", // green
		"#3b82f6;", // blue
		"#8b5cf6;", // violet
		"#ec4899;", // pink
		"#06b6d4;", // cyan
		"#f59e0b;", // amber
		"#10b981;", // emerald
		"#6366f1;", // indigo
		"#84cc16;", // lime
	}

	hash := 0
	for _, char := range username {
		hash = hash*31 + int(char)
	}

	index := hash % len(colors)
	if index < 0 {
		index = -index
	}
	cssVal := fmt.Sprintf("%s: %s", css, colors[index])

	return templ.SafeCSS(cssVal)
}
