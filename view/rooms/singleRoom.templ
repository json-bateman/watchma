package rooms 

import (
	"encoding/json"
	"fmt"
	"github.com/json-bateman/jellyfin-grabber/internal/game"
	"github.com/json-bateman/jellyfin-grabber/view/common"
	"github.com/starfederation/datastar-go/datastar"
	"strings"
)

type ChatMessage struct {
	Username string `json:"username"`
	Message  string `json:"message"`
}

templ SingleRoom(room *game.Room) {
	@common.Layout(room.Name) {
		<!-- janky way to set the subject field for the NATS payload
    TODO: make this not janky -->
		<span data-signals={ fmt.Sprintf("{subject: 'chat.%s', username: '%s'}", room.Name) }></span>
		<span data-signals={ fmt.Sprintf("{subject: 'chat.%s'}", room.Name) }></span>
		<section class="flex flex-col justify-between grow">
			<div>
				<div>Room Name: { room.Name }</div>
			</div>
			<div>
				<div class="flex gap-2">
					<input
						class="input"
						placeholder="chat message..."
						data-bind-message
						data-on-keydown="if (evt.key !== 'Enter' || !$message.trim().length) return; @post('/api/nats/publish');$message = '';"
					/>
					<button
						data-on-click="@post('/api/nats/publish');$message='';"
						class="btn !w-16"
					>
						Send
					</button>
				</div>
				<div
					id="container"
					data-on-load={ datastar.GetSSE(fmt.Sprintf("/message/%s", room.Name)) }
				>
					<div id="chat" class="chat-messages h-96 overflow-y-auto border p-4"></div>
				</div>
			</div>
		</section>
	}
}

templ ChatBox(messages []string) {
	<div id="chat" class="chat-messages h-96 overflow-y-auto border p-4">
		for _, m := range messages {
			@chatMessage(m)
		}
	</div>
}

templ chatMessage(jsonMsg string) {
	if msg := parseMessage(jsonMsg); msg != nil {
		<div class="mb-2 flex">
			<span class="font-bold text-accent">{ strings.Trim(msg.Username," ") }</span>
			<span class="text-gray-600">:&nbsp;</span>
			<span>{ msg.Message }</span>
		</div>
	} else {
		<p class="text-red-500">Invalid message format</p>
	}
}

func parseMessage(jsonStr string) *ChatMessage {
	var msg ChatMessage
	if err := json.Unmarshal([]byte(jsonStr), &msg); err != nil {
		return nil
	}
	return &msg
}
