// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.865
package common

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Layout(title string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<html data-theme=\"light\" lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><link href=\"public/style.css\" rel=\"stylesheet\"><link href=\"public/favicon.png\" rel=\"icon\" type=\"image/png\"><title>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `view/common/layout.templ`, Line: 10, Col: 17}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</title></head><body class=\"bg-background\"><header><button class=\"text-text\" id=\"theme-toggle\" type=\"button\"><svg id=\"sun\" xmlns=\"http://www.w3.org/2000/svg\" width=\"40\" height=\"40\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><circle cx=\"12\" cy=\"12\" r=\"5\"></circle> <line x1=\"12\" y1=\"1\" x2=\"12\" y2=\"3\"></line> <line x1=\"12\" y1=\"21\" x2=\"12\" y2=\"23\"></line> <line x1=\"4.22\" y1=\"4.22\" x2=\"5.64\" y2=\"5.64\"></line> <line x1=\"18.36\" y1=\"18.36\" x2=\"19.78\" y2=\"19.78\"></line> <line x1=\"1\" y1=\"12\" x2=\"3\" y2=\"12\"></line> <line x1=\"21\" y1=\"12\" x2=\"23\" y2=\"12\"></line> <line x1=\"4.22\" y1=\"19.78\" x2=\"5.64\" y2=\"18.36\"></line> <line x1=\"18.36\" y1=\"5.64\" x2=\"19.78\" y2=\"4.22\"></line></svg> <svg id=\"moon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"40\" height=\"40\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z\"></path></svg></button></header><!-- Here's the goods, children inside of <main> --><main>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</main><footer class=\"text-orange-400 text-xl\">Â© 2025</footer><!-- Datastar --><script type=\"module\" src=\"public/datastar-with-plugins.js\"></script><!-- Theme toggler --><script>\n        const toggle = document.getElementById(\"theme-toggle\");\n        const sun = document.getElementById(\"sun\");\n        const moon = document.getElementById(\"moon\");\n\n        const storedTheme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n          ? \"dark\"\n          : \"light\";\n        document.documentElement.setAttribute(\"data-theme\", storedTheme);\n\n        const cT = document.documentElement.getAttribute(\"data-theme\");\n        if (cT === \"dark\" && moon) {\n          moon.setAttribute(\"class\", \"hidden\");\n        }\n        if (cT === \"light\" && sun) {\n          sun.setAttribute(\"class\", \"hidden\");\n        }\n\n        function toggleTheme() {\n          const currentTheme = document.documentElement.getAttribute(\"data-theme\");\n          const newTheme = currentTheme === \"light\" ? \"dark\" : \"light\";\n\n          document.documentElement.setAttribute(\"data-theme\", newTheme);\n          localStorage.setItem(\"theme\", newTheme);\n\n          // Show/hide the correct icon\n          if (newTheme === \"dark\") {\n            sun.classList.remove(\"hidden\");\n            moon.classList.add(\"hidden\");\n          } else {\n            sun.classList.add(\"hidden\");\n            moon.classList.remove(\"hidden\");\n          }\n        }\n\n        if (toggle) {\n          toggle.onclick = function () {\n            toggleTheme()\n          };\n        }\n\n        // Keyboard shortcut to toggle theme (Shift + T)\n        document.addEventListener('keydown', (e) => {\n            if (e.shiftKey && e.key === 'T') {\n                e.preventDefault();\n                toggleTheme();\n            }\n        });\n    </script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
