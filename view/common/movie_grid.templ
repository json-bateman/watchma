package common

import (
	"fmt"
	"slices"
	"watchma/pkg/types"
)

type MovieGridOptions struct {
	EmptyMessage     string
	Gap              string
	MinCardWidth     string
	MaxCardWidth     string
	MakeOnClickMovie func(movieId string) string
	Selectable       bool
	ShowOverlay      bool
}

func DefaultGridOptions() MovieGridOptions {
	return MovieGridOptions{
		MinCardWidth: "160px",
		MaxCardWidth: "180px",
		Gap:          "1rem",
		Selectable:   false,
		ShowOverlay:  true,
		EmptyMessage: "No movies found",
	}
}

templ MovieGrid(movies []types.Movie, selectedMovies []string, baseUrl string, opts MovieGridOptions) {
	<div
		id="moviegrid"
		class="grid grid-cols-[repeat(auto-fill,minmax(var(--card-min),1fr))] gap-[var(--gap)]"
		style={ fmt.Sprintf("--card-min:%s; --gap:%s;", opts.MinCardWidth, opts.Gap) }
	>
		if len(movies) == 0 {
			@EmptyState(opts.EmptyMessage)
		} else {
			for _, movie := range movies {
				@MovieCard(movie, selectedMovies, baseUrl, opts)
			}
		}
	</div>
}

templ MovieCard(movie types.Movie, selectedMovies []string, baseUrl string, opts MovieGridOptions) {
	if opts.Selectable {
		@SelectableMovieCard(movie, selectedMovies, baseUrl, opts)
	} else {
		@StaticMovieCard(movie, baseUrl, opts)
	}
}

templ SelectableMovieCard(movie types.Movie, selectedMovies []string, baseUrl string, opts MovieGridOptions) {
	{{
		selected := slices.Contains(selectedMovies, movie.Id)

		labelClass := "aspect-[2/3] cursor-pointer relative group box-border max-w-[var(--card-max)]"

		if selected {
			labelClass += " border-2 border-orange-500 ring-4 ring-orange-500 shadow-brutalist"
		}
	}}
	<label
		id={ movie.Id }
		class={ labelClass }
		style={ fmt.Sprintf("--card-max:%s;", opts.MaxCardWidth) }
	>
		<input
			id={ movie.Id }
			class="hidden"
			type="checkbox"
			value={ movie.Id }
			data-on:click={ opts.MakeOnClickMovie(movie.Id) }
			aria-label={ movie.Name }
		/>
		@MovieTitleImage(movie, baseUrl, MovieTitleImageOptions{
			Class: "h-full w-full object-cover transition-transform group-hover:scale-105",
		})
		if opts.ShowOverlay {
			@overlay(movie)
		}
	</label>
}

templ StaticMovieCard(movie types.Movie, baseUrl string, opts MovieGridOptions) {
	@MovieTitleImage(movie, baseUrl, MovieTitleImageOptions{
		Class: "aspect-[2/3] w-full object-cover transition-transform group-hover:scale-105",
	})
	if opts.ShowOverlay {
		@overlay(movie)
	}
}

templ overlay(movie types.Movie) {
	<div class="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent opacity-0 group-hover:opacity-100 transition-opacity cursor-pointer">
		<div class="absolute bottom-0 left-0 right-0 p-3">
			if movie.ProductionYear > 0 {
				<p class="text-white/80 text-xs select-none">{ fmt.Sprintf("%d", movie.ProductionYear) }</p>
			}
			<h3 class="text-white text-lg line-clamp-2 select-none">{ movie.Name }</h3>
			if movie.CriticRating > 0 {
				<p class="text-white text-sm select-none">{ fmt.Sprintf("üßê %d üçø %d", movie.CriticRating, int(movie.CommunityRating) * 10) }</p>
			}
		</div>
	</div>
}

templ EmptyState(message string) {
	<div class="col-span-full flex flex-col items-center justify-center py-12 text-center">
		<p class="text-lg text-text/80">{ message }</p>
	</div>
}
