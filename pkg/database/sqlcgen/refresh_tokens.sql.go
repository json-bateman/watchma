// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: refresh_tokens.sql

package sqlcgen

import (
	"context"
	"time"
)

const createSession = `-- name: CreateSession :exec
INSERT INTO refresh_tokens (user_id, token, expires_at, created_at)
VALUES (?, ?, ?, CURRENT_TIMESTAMP)
`

type CreateSessionParams struct {
	UserID    int64     `json:"user_id"`
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.ExecContext(ctx, createSession, arg.UserID, arg.Token, arg.ExpiresAt)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM refresh_tokens
WHERE token = ?
`

func (q *Queries) DeleteSession(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, token)
	return err
}

const getUserIDByToken = `-- name: GetUserIDByToken :one
SELECT user_id FROM refresh_tokens
WHERE token = ?
LIMIT 1
`

func (q *Queries) GetUserIDByToken(ctx context.Context, token string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserIDByToken, token)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}
